# Менеджер задач
#
# Задача: Создай класс `Task`, который позволяет управлять задачами (делами).
# У задачи должны быть атрибуты: описание задачи, срок выполнения и статус (выполнено/не выполнено).
# Реализуй функцию для добавления задач, отметки выполненных задач и вывода списка текущих (не выполненных) задач.
#
# *Дополнительное задание:
#
# Ты разрабатываешь программное обеспечение для сети магазинов.
# Каждый магазин в этой сети имеет свои особенности, но также существуют общие характеристики,
# такие как адрес, название и ассортимент товаров.
# Ваша задача — создать класс `Store`, который можно будет использовать для создания различных магазинов.
#
# Шаги:
#
# 1. Создай класс `Store`:
# -Атрибуты класса:
# - `name`: название магазина.
# - `address`: адрес магазина.
# - `items`: словарь, где ключ - название товара, а значение - его цена. Например, `{'apples': 0.5, 'bananas': 0.75}`.
#
# - Методы класса:
#
# - `__init__ - конструктор, который инициализирует название и адрес, а также пустой словарь для `items`.
# - метод для добавления товара в ассортимент.
# - метод для удаления товара из ассортимента.
# - метод для получения цены товара по его названию. Если товар отсутствует, возвращайте `None`.
# - метод для обновления цены товара.
#
# 2. Создай несколько объектов класса `Store`:
#
# Создай не менее трех различных магазинов с разными названиями, адресами и добавь в каждый из них несколько товаров.
#
# 3. Протестировать методы:
#
# Выбери один из созданных магазинов и протестируй все его методы: добавь товар, обнови цену,
# убери товар и запрашивай цену.
# В поле для ответа загрузи ссылку на GitHub-репозиторий, содержащий код проекта с реализацией задания.

# Создаем Класс Task
class Task():
# Создаем функцию __init__ , внутри создаем список Tasks со всеми задачами
    def __init__(self):
# Список Tasks
        self.tasks = []

# Добавляем функцию add_task - добавляет задачи и атрибуты
    def add_task(self, deadline, description):
# атрибут deadline - срок выполнения
# атрибут description - описание
# атрибут status - статус
# append - Добавление в список, будем добавлять в список словарь
        self.tasks.append({'deadline': deadline, 'description': description, 'status': 'Не выполнено'})

# Добавляем функцию для отметки задач с перебором списка
    def complete_tasks(self, description): # Описание, которое будем вводить
# С помощью цикла for перебираем задачи в списке задач self.tasks
        for task in self.tasks:
# Делаем проверки, берем список задач и сравниваем с тем что ввели
# Берем описание задачи и сравниваем с тем, что ввели. Отмечаем то, что выполнено и не выполнено.
            if task['description'] == description:
# Если то описание, которое ввели мы, равно описанию существующее в списке, то меняем статус на Выполнено
                task['status'] = 'Выполнено'
# Вывод значения описания (как переменная в фигурных скобках)
                print(f'Задача {description} выполнена')
# Если задача не найдена или не выполнена
            else:
                print(f'Задача {description} не найдена')
# Функция, которая будет выводить список невыполненных задач
    def show_tasks(self):
        print('Текущие задачи')
# Цикл for перебирает наши задачи
        for task in self.tasks:
# Проверка статусов выполнен или не выполнен
            if task['status'] == 'Не выполнено':
                print(f'{task['description']} - {task['deadline']}')

# Создаем объект класса task

t = Task()
# Добавляем задачи
t.add_task('01.09.2025','Прочитать книгу')
t.add_task('02.09.2025','Выпить кофе')
t.add_task('03.09.2025','Сходить на улицу')

# Выводим список всех задач
t.show_tasks()

# Отметка задач выполненными
t.complete_tasks('Прочитать книгу')



