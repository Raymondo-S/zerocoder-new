# Разработай систему управления учетными записями пользователей для небольшой компании.
# Компания разделяет сотрудников на обычных работников и администраторов.
# У каждого сотрудника есть уникальный идентификатор (ID), имя и уровень доступа.
# Администраторы, помимо обычных данных пользователей, имеют дополнительный уровень доступа и
# могут добавлять или удалять пользователя из системы.
#
# Требования:
#
# 1.Класс `User*: Этот класс должен инкапсулировать данные о пользователе: ID, имя и уровень доступа
# ('user' для обычных сотрудников).
#
# 2.Класс `Admin`: Этот класс должен наследоваться от класса `User`.
# дополнительный атрибут уровня доступа, специфичный для администраторов ('admin').
# Класс должен также содержать методы `add_user` и `remove_user`, которые позволяют
# добавлять и удалять пользователей из списка (представь, что это просто список экземпляров `User`).
#
# 3.Инкапсуляция данных: Убедись, что атрибуты классов защищены от прямого доступа и модификации снаружи.
# Предоставь доступ к необходимым атрибутам через методы (например, get и set методы).

# Начинаем

# Создаем структуру класса class user, базовый, от него будут наследоваться атрибуты в class admin
class User():
# Указываем функцию инициализации, вводим id и имя
    def __init__(self, user_id, name):
# Указываем характеристики класса
        self._user_id = user_id
        self._name = name
# Указываем уровень доступа
        self._level = 'user'

# Указываем функцию, метод которая будет брать данные из user_id
    def get_user_id(self):
# Возвращаем из функции это значение
         return self._user_id

# Указываем функцию, метод которая будет брать данные из name
    def get_name(self):
# Возвращаем из функции это значение
         return self._name

# Указываем функцию, метод которая будет брать данные из level
    def get_level(self):
# Возвращаем из функции это значение
         return self._level

# Установим set для установки новых данных (например: имя(name))
    def set_name(self, name):
        self._name = name

# Создаем структуру класса class Admin, которая наследует структуру из class User
class Admin(User):
# Формируем функцию инициализации
    def __init__(self, user_id, name):
# Забираем данные из class User через метод super
        super().__init__(user_id, name)
# Изменяем уровень доступа для class Admin
        self._level = 'admin'

# Создаем новый метод add_user для добавления пользователей
    def add_user(self, user_list, user):
# Добавляем новые данные с помощью команды append, в список пользователей
        user_list.append(user)
# Выводим информацию с помощью print
        print(f'Пользователь успешно добавлен')
# Вывод списка Юзеров
        print(user_list)

# Создаем новый метод remove_user для удаления пользователей
    def remove_user(self, user_list, user):
# Удаляем данные с помощью команды remove
        user_list.remove(user)
# Вывод списка Юзеров
        print(user_list)

# Создаем пустой список для хранения данных
users = []
# Создаем объекты классов
# Для Админа
admin = Admin('alpha1', 'Zero')
# Для Юзера
user1 = User('gamma1', 'Second')

# Смотрим данные через print
print(user1.get_name())

# Добавляем Юзеров через Админа
admin.add_user(users, user1)









