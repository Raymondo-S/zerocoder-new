# *Дополнительное задание:
#
# Ты разрабатываешь программное обеспечение для сети магазинов.
# Каждый магазин в этой сети имеет свои особенности, но также существуют общие характеристики,
# такие как адрес, название и ассортимент товаров. Ваша задача — создать класс `Store`,
# который можно будет использовать для создания различных магазинов.
#
# Шаги:
# 1. Создай класс `Store`:
#
#-Атрибуты класса:
# - `name`: название магазина.
# - `address`: адрес магазина.
# - `items`: словарь, где ключ - название товара, а значение - его цена. Например, `{'apples': 0.5, 'bananas': 0.75}`.
#
# - Методы класса:
# - `__init__ - конструктор, который инициализирует название и адрес, а также пустой словарь для `items`.
# - метод для добавления товара в ассортимент.
# - метод для удаления товара из ассортимента.
# - метод для получения цены товара по его названию. Если товар отсутствует, возвращайте `None`.
# - метод для обновления цены товара.
#
# 2. Создай несколько объектов класса `Store`:
# Создай не менее трех различных магазинов с разными названиями, адресами и добавь в каждый из них несколько товаров.
#
# 3. Протестировать методы:
# Выбери один из созданных магазинов и протестируй все его методы:
# добавь товар, обнови цену, убери товар и запрашивай цену.

# Создаем класс
class Store():
# Создаем метод __init__
# Нужно вводить название (name), адрес (address)
    def __init__(self, name, address):
# Создаем атрибуты - характеристика
        self.name = name
        self.address = address
# items, как словарь, чтобы хранить пары: ключ - значения (например: название товара и его цена)
        self.items = {}

# Создаем метод add_item для добавления товаров в ассортимент
# Добавление названия товара в словарь (item_name) и цена (price)
    def add_item(self, item_name, price):
# Добавляем в словарь (self.items) новый ключ (item_name) и его значение (price)
        self.items[item_name] = price
# Вывод данных
        print(f'Товар {item_name} был добавлен в {self.name}')

# Создаем метод remove_item для удаления товаров из ассортимента
    def remove_item(self, item_name):
# Если наименование присутствует в словаре, то его удаляем
        if item_name in self.items:
# Удаление del
            del self.items[item_name]
# Вывод данных
            print(f'Товар {item_name} удален из {self.name}')

# Создаем метод get_price для добавления/получения цены
    def get_price(self, item_name):
# Берем значение по ключу
        return self.items.get(item_name)

# Создаем метод update_price для обновления цены товара new_price
    def update_price(self, item_name, new_price):
# Изменение данных(цены) по ключу с проверкой имени в словаре
        if item_name in self.items:
# Устанавливаем новую цену
            self.items[item_name] = new_price
# Вывод информации об изменении
            print(f'Цена {item_name} обновлена в {self.name}')
# Условие "иначе" else
        else:
            print(f'Товар {item_name} не найден')

# Создаем объекты классов
# Создаем магазины и адреса
store1 = Store('Чижик', 'Мира, 20')
store2 = Store('Ежик', 'Голубева, 100')
store3 = Store('Фрукты', 'Абрикосова, 55')

# Формируем наименование товаров и цену
store1.add_item('Молоко', 150)
store1.add_item('Помидор', 470)
store1.add_item('Зубная паста', 250)

# Удаляем позицию
store1.remove_item('Зубная паста')

# Вывод цены
print(store1.get_price('Помидор'))

# Обновление цены
store1.update_price('Молоко', 100)

